#!/bin/sh

set -ue

if which dpkg > /dev/null 2>&1; then
    system_type="debian"
elif [ -f "/etc/alpine-release" ]; then
    system_type="alpine"
elif [ "$(uname)" == "Darwin" ]; then
    system_type="macos"
else
    sv_echo_block "= Error: this script is intended to be run on Debian/MacOS based systems"
    sv_echo_block_end
    exit 1
fi

script_version="1.0"
# path to directory, where local supervisor files will be stored (relative to user's home directory)
local_sub_path=".supervisor"
script="$0"
update=""
remove=""
extended_env=""

sv_echo() {
    echo "$@" 1>&2
}
sv_echo_block_start() {
    sv_echo "[ $@ ]"
}
sv_echo_block() {
    sv_echo "  $@"
}
sv_echo_block_end() {
    sv_echo ''
}
sv_usage() {
    sv_echo "Usage: $script user [options]"
    sv_echo "Options:"
    sv_echo "  -u    update mode (overwrite existing installation)"
    sv_echo "  -r    remove mode (remove existing installation)"
    sv_echo "  -e    use extended env (run supervisor via login shell)"
    sv_echo "  -h    show usage message and exit"
}

sv_echo "== Supervisor setup script v${script_version}\n"

if [ "$system_type" == "macos" ]; then
    args="$(getopt urhe "" $*)"
else
    args="$(getopt -o urhe -n "$script" -- "$@")"
fi
echo $args

if [ $? -ne 0 ]; then
    exit 1
fi

eval set -- "${args}"

while true; do
echo "$1"
    case "$1" in
        -u|--update)
            update="y"
            shift
        ;;
        -r|--remove)
            remove="y"
            shift
        ;;
        -e)
            extended_env="y"
            shift
        ;;
        -h|--help)
            sv_usage
            exit 0
        ;;
        --)
            shift
            if [ $system_type != "macos" ]; then
                break
            fi
        ;;
        *)
            sv_echo "Unsupported option '$1'"
            exit 1
        ;;
    esac
done

exit 1

if [ "$update" = "y" -a "$remove" = "y" ]; then
    sv_echo "Unable to use update and remove mode at the same time"
    exit 1
fi

target_user="${1-}"
if [ -z "$target_user" ]; then
    sv_echo "Target user name should be provided"
    sv_usage
    exit 1
fi



sv_echo_block_start "Checking environment"
sv_echo_block "+ User name '$target_user' is provided"

if [ "$(id -u)" -ne 0 ]; then
    sv_echo_block "= Error: this script is intended to be run by root"
    sv_echo_block_end
    exit 1
else
    sv_echo_block "+ Running from root"
fi

if [ $system_type == "debian" ]; then
    sv_echo_block "+ Running on Debian-based system"

    supervisord_bin="/usr/bin/supervisord"
    supervisorctl_bin="/usr/bin/supervisorctl"
    supervisor_global_conf_d="/etc/supervisor/conf.d"
    supervisor_global_conf_ext=".conf"
elif [ $system_type == "alpine" ]; then
    sv_echo_block "+ Running on Alpine-based system"

    supervisord_bin="/usr/bin/supervisord"
    supervisorctl_bin="/usr/bin/supervisorctl"
    supervisor_global_conf_d="/etc/supervisor.d"
    supervisor_global_conf_ext=".ini"
elif [ $system_type == "macos" ]; then
    sv_echo_block "+ Running on MacOS system"

    supervisord_bin="/Applications/MAMP/Library/bin/supervisord"
    supervisorctl_bin="/Applications/MAMP/Library/bin/supervisorctl"
    supervisor_global_conf_d="/etc/supervisor.d"
    supervisor_global_conf_ext=".ini"
else
    sv_echo_block "= Error: this script is intended to be run on Debian/MacOS based systems"
    sv_echo_block_end
    exit 1
fi

set +e
target_user_id="$(id -u ${target_user} 2>/dev/null)"
set -e

if [ -z "$target_user_id" ]; then
    sv_echo_block "= Error: target user is missing"
    sv_echo_block_end
    exit 1
else
    sv_echo_block "+ Target user is exist"
fi

if [ $system_type == "macos" ]; then
    if [ "$target_user_id" -lt 500 ]; then
        sv_echo_block "= Error: target user should not be system account"
        sv_echo_block_end
        exit 1
    fi
elif [ "$target_user_id" -lt 1000 ]; then
    sv_echo_block "= Error: target user should not be system account"
    sv_echo_block_end
    exit 1
else
    sv_echo_block "+ Target user is not a system account"
fi

target_user_home="$(su "${target_user}" -c 'echo $HOME')"

if [ -z "$target_user_home" ]; then
    sv_echo_block "= Error: unable to get home directory of target user"
    sv_echo_block_end
    exit 1
else
    sv_echo_block "+ Detected target user home directory '$target_user_home'"
fi

local_path="$target_user_home/$local_sub_path"
local_ctl_bin="$local_path/bin/sv-ctl"
local_create_bin="$local_path/bin/sv-create"
local_remove_bin="$local_path/bin/sv-remove"
local_install_bin="$local_path/bin/sv-install"
local_config="$local_path/etc/supervisord.conf"
local_supervisord_launch_cmd="${supervisord_bin} -n -c ${local_config}"
sv_run_config="$supervisor_global_conf_d/$target_user-supervisor$supervisor_global_conf_ext"

sv_echo_block "+ Using local path '$local_path'"

if [ "$extended_env" = "y" ]; then
    bash_path="$(which bash 2>&1)"

    if [ ! -z "$bash_path" ]; then
        sv_echo_block "+ Using extended user environment"
        local_supervisord_launch_cmd="$bash_path -lc \"exec ${local_supervisord_launch_cmd}\""
    else
        sv_echo_block "= Error: bash should be available to use extended user environment"
        sv_echo_block_end
        exit 1
    fi
fi

sv_echo_block "= Ok"
sv_echo_block_end



if [ "$remove" = "y" ]; then
    sv_echo_block_start "Removing"

    if [ -e "$local_path" ]; then
        su "${target_user}" -c "rm -rf '$local_path'"
        sv_echo_block "+ '$local_path'"
    fi

    if [ -e "$sv_run_config" ]; then
        rm -f "$sv_run_config"
        sv_echo_block "+ '$local_path'"
    fi

    sv_echo_block "Updating global supervisor process"
    "$supervisorctl_bin" update > /dev/null 2>&1

    sv_echo_block "= Ok"
    sv_echo_block_end
    exit 0
else
    sv_echo_block_start "Checking local files"

    if [ -e "$local_config" ]; then
        if [ "$update" != "y" ]; then
            sv_echo_block "= Error: local config file '$local_config' already exists"
            sv_echo_block_end
            exit 1
        else
            sv_echo_block "~ Notice: local config file '$local_config' already exists and will be replaced"
        fi
    fi

    for bin in "$local_ctl_bin" "$local_create_bin" "$local_remove_bin"; do
        if [ -e "$bin" ]; then
            if [ "$update" != "y" ]; then
                sv_echo_block "Error: local bin '$bin' already exists"
                sv_echo_block_end
                exit 1
            else
                sv_echo_block "~ Notice: local bin '$bin' already exists and will be replaced"
            fi
        fi
    done
fi

sv_echo_block "= Ok"
sv_echo_block_end



#
# Supervisor install
#
sv_echo_block_start "Installing Supervisor"

case "$system_type" in
    "debian")
        if dpkg -s supervisor > /dev/null 2>&1; then
            sv_echo_block "= Ok (already installed)"
            sv_echo_block_end
        else
            if ! which apt-get > /dev/null 2>&1; then
                sv_echo_block "= Error, 'apt-get' is missing"
                sv_echo_block_end
                exit 1
            fi

            if apt-get install -y --no-install-recommends supervisor > /dev/null 2>&1; then
                sv_echo_block "= Ok"
                sv_echo_block_end
            else
                sv_echo_block "= Error"
                sv_echo_block_end
                exit 1
            fi
        fi
    ;;

    "alpine")
        if which "$supervisord_bin" > /dev/null 2>&1; then
            sv_echo_block "= Ok (already installed)"
            sv_echo_block_end
        else
            if apk --no-cache add supervisor > /dev/null 2>&1; then
                sv_echo_block "= Ok"
                sv_echo_block_end
            else
                sv_echo_block "= Error"
                sv_echo_block_end
                exit 1
            fi
        fi
    ;;

    "macos")
        if which "$supervisord_bin" > /dev/null 2>&1; then
            sv_echo_block "= Ok (already installed)"
            sv_echo_block_end
        else
            if ! which "pip" > /dev/null 2>&1; then
                if ! which "easy_install" > /dev/null 2>&1; then
                    sv_echo_block "+ installing easy_install"
                    if ! brew install distribute > /dev/null 2>&1; then
                        sv_echo_block "= Error"
                        sv_echo_block_end
                        exit 1
                    fi
                fi

                sv_echo_block "+ installing pip"

                if ! easy_install pip > /dev/null 2>&1; then
                    sv_echo_block "= Error"
                    sv_echo_block_end
                    exit 1
                fi
            fi

            sv_echo_block "+ installing supervisor"

            if ! pip install supervisor > /dev/null 2>&1; then
                sv_echo_block "= Error"
                sv_echo_block_end
                exit 1
            fi
        fi
    ;;
esac



#
# Supervisor validate
#
sv_echo_block_start "Validating Supervisor install"

for bin in "$supervisord_bin" "$supervisorctl_bin"; do
    if [ ! -e "$bin" ]; then
        sv_echo_block "= Error: Supervisor binary '$bin' is missing"
        sv_echo_block_end
        exit 1
    fi
done

if [ ! -e "$supervisor_global_conf_d" ]; then
    sv_echo_block "= Notice: Supervisor config directory '$supervisor_global_conf_d' is missing"
fi

if [ -e "$sv_run_config" ]; then
    if [ "$update" != "y" ]; then
        sv_echo_block "= Error: config file '$sv_run_config' already exists"
        sv_echo_block_end
        exit 1
    else
        sv_echo_block "~ Notice: config file '$sv_run_config' already exists and will be replaces"
    fi
fi

sv_echo_block "= Ok"
sv_echo_block_end



#
# Local directory structure
#
sv_echo_block_start "Creating directory structure using target path '$local_path'"

for d in "$local_path" "$local_path/bin" "$local_path/etc" "$local_path/etc/conf.d" "$local_path/run" "$local_path/log"; do
    if [ ! -e "$d" ]; then
        sv_echo_block "+ '$d'"
        su "${target_user}" -c "mkdir '${d}'"
    else
        sv_echo_block "+ Skipping '$d', already exists"
    fi
done

sv_echo_block "= Ok"
sv_echo_block_end



#
# Local config
#
sv_echo_block_start "Creating local config file '$local_config'"

cat <<- EOM | su "${target_user}" -c "cat > "${local_config}""
[unix_http_server]
file=${local_path}/run/supervisor.sock
chmod=0700

[supervisord]
logfile=${local_path}/log/supervisord.log
pidfile=${local_path}/run/supervisord.pid
childlogdir=${local_path}/log

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix://${local_path}/run/supervisor.sock

[include]
files = ${local_path}/etc/conf.d/*.conf
EOM

sv_echo_block "= Ok"
sv_echo_block_end



#
# executables
#
sv_echo_block_start "Creating executables"

if [ "$update" = "y" -a -e "${local_path}/bin" ]; then
    su "${target_user}" -c "rm -f "${local_path}/bin/"*"
fi

# sv-ctl
sv_echo_block "+ '$local_ctl_bin'"
cat <<- EOM | su "${target_user}" -c "cat > "${local_ctl_bin}""
#!/bin/sh

exec /usr/bin/supervisorctl -c ${local_config} "\$@"
EOM
su "${target_user}" -c "chmod u+x "${local_ctl_bin}""

# sv-create
sv_echo_block "+ '$local_create_bin'"
cat <<- EOM_ | su "${target_user}" -c "cat > "${local_create_bin}""
#!/bin/sh

set -ue
sv_echo() { echo "\$@" 1>&2; }

target_dir="${local_path}/etc/conf.d"
name="\${1-}"
command="\${2-}"

if [ -z "\$name" -o -z "\$command" ]; then
    sv_echo "Usage: \$0 name command"
    exit 1
fi

config="\$target_dir/\${name}.conf"

if [ -e "\$config" ]; then
    sv_echo "Target config file '\$config' already exists"
    exit 1
fi

cat <<- EOM > "\${config}"
[program:\${name}]
command=\${command}
EOM

sv_echo "'\${config}' created"
EOM_
su "${target_user}" -c "chmod u+x "${local_create_bin}""

# sv-remove
sv_echo_block "+ '$local_remove_bin'"
cat <<- EOM_ | su "${target_user}" -c "cat > "${local_remove_bin}""
#!/bin/sh

set -ue
sv_echo() { echo "\$@" 1>&2; }

target_dir="${local_path}/etc/conf.d"
name="\${1-}"

if [ -z "\$name" ]; then
    sv_echo "Usage: \$0 name"
    exit 1
fi

config="\$target_dir/\${name}.conf"

if [ ! -e "\$config" ]; then
    sv_echo "Config file '\$config' does not exists"
    exit 1
fi

rm -f "\$config"
sv_echo "'\${config}' removed"
EOM_
su "${target_user}" -c "chmod u+x "${local_remove_bin}""

# sv-install
sv_echo_block "+ '$local_install_bin'"
cat <<- EOM_ | su "${target_user}" -c "cat > "${local_install_bin}""
#!/bin/sh

set -ue
sv_echo() { echo "\$@" 1>&2; }

target_dir="${local_path}/etc/conf.d"
sv_ctl_bin="${local_ctl_bin}"
update=""

args="\$(getopt -o u -l "update" -n "\$0" -- "\$@")"

if [ \$? -ne 0 ]; then
    exit 1
fi

eval set -- "\${args}"

while true; do
    case "\$1" in
        -u|--update)
            update="y"
            shift
        ;;
        --)
            shift
            break
        ;;
        *)
            echo "Unsupported option '\$1'"
            exit 1
        ;;
    esac
done

config="\${1-}"
id="\${2-}"

if [ -z "\$id" -o -z "\$config" ]; then
    sv_echo "Usage: \$0 config id"
    exit 1
fi

if [ ! -f "\${config}" ]; then
    sv_echo "'\${config}' is missing or not a file"
    exit 1
fi

output="\${target_dir}/\${id}.conf"

if [ "\$update" != "y" -a -e "\$output" ]; then
    sv_echo "Output config file '\$output' already exists"
    exit 1
fi

content="cat << __EOM_SV_INSTALL__
\$(cat \${config})
__EOM_SV_INSTALL__
"

root_dir="\$(readlink -f "\$(dirname "\$config")")"
echo "\$(eval "\${content}")" > "\$output"
sv_echo "'\$output' installed"
sv_echo "Run '\$sv_ctl_bin update' to activate new configuration"
EOM_
su "${target_user}" -c "chmod u+x "${local_install_bin}""

sv_echo_block "= Ok"
sv_echo_block_end



#
# Global config setup
#
sv_echo_block_start "Creating global config '$sv_run_config'"

sv_run_config_dir="$(dirname "$sv_run_config")"

if [ ! -e "$sv_run_config_dir" ]; then
    sv_echo_block "+ Creating global config directory '$sv_run_config_dir'"
    mkdir -p "$sv_run_config_dir"
fi

cat <<- EOM > "${sv_run_config}"
[program:${target_user}-supervisor]
command=${local_supervisord_launch_cmd}
user=${target_user}
directory=${target_user_home}
environment=HOME="${target_user_home}",USER="${target_user}"
EOM

sv_echo_block "= Ok"
sv_echo_block_end



#
# Supervisor start
#
sv_echo_block_start "Starting local supervisor process"
if "$supervisorctl_bin" update > /dev/null 2>&1; then
    sv_echo_block "= Ok"
else
    sv_echo_block "= Error: is global supervisor process running?"
fi
sv_echo_block_end



#
# Notes
#
sv_echo_block_start "Notes"
sv_echo_block "For convenience you can add '$local_path/bin' to your PATH"

case "$system_type" in
    "debian")
        sv_echo_block "On Debian add the following line to '$target_user_home/.profile':"
        sv_echo_block "  export PATH=\"\$HOME/${local_sub_path}/bin:\$PATH\""
    ;;
esac

sv_echo_block_end
